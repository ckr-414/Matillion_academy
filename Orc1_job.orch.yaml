type: "orchestration"
version: "1.0"
pipeline:
  components:
    Begin:
      type: "start"
      transitions:
        unconditional:
        - "Query Result To Grid"
        - "Python Pushdown"
      parameters:
        componentName: "Begin"
    Query Result To Grid:
      type: "query-to-grid"
      transitions:
        success:
        - "Grid Iterator 2"
      parameters:
        componentName: "Query Result To Grid"
        mode: "Advanced"
        gridVariable: "v_grid_table"
        gridVariableMapping:
        - - "TABLE_NAME"
          - "table_name"
        query: "select distinct table_name from information_schema.TABLES where table_schema='ZERO_TO_HERO'"
      postProcessing:
        updateScalarVariables:
    SQL Script:
      type: "sql-executor"
      parameters:
        componentName: "SQL Script"
        scriptLocation: "Component"
        sqlScript: "Alter table practice_sql.zero_to_hero.${v_scalar_table} add column\
          \ inserted_date timestamp"
      postProcessing:
        updateScalarVariables:
    Grid Iterator 2:
      type: "grid-iterator"
      iterationTarget: "SQL Script"
      parameters:
        componentName: "Grid Iterator 2"
        gridVariable: "v_grid_table"
        gridIteratorVariableMapping:
        - - "table_name"
          - "v_scalar_table"
        breakOnFailure: "No"
        concurrency: "Sequential"
      postProcessing:
        updateScalarVariables:
    Python Pushdown:
      type: "python-pushdown"
      parameters:
        componentName: "Python Pushdown"
        warehouse: "[Environment Default]"
        externalAccessIntegrations:
        pythonVersion: "3.10"
        packages:
        scriptLocation: "Component"
        pythonScript: "###\n# Variables are directly accessible:\n#   print (myvar)\n\
          # Updating a variable:\n#   context.updateVariable('myvar', 'new-value')\n\
          # Updating a grid variable:\n#   context.updateGridVariable('mygridvar',[['list','of'],['lists','!']])\n\
          ###)\n# Importing Pandas library\nimport pandas as pd\n\n# Creating two\
          \ lists\nauthor = ['Jitender', 'Purnima',\n\t\t'Arpit', 'Jyoti']\narticle\
          \ = [210, 211, 114, 178]\n\n# Creating two Series by passing lists\nauth_series\
          \ = pd.Series(author)\narticle_series = pd.Series(article)\n\n# Creating\
          \ a dictionary by passing Series objects as values\nframe = {'Author': auth_series,\n\
          \t\t'Article': article_series}\n\n# Creating DataFrame by passing Dictionary\n\
          result = pd.DataFrame(frame)\n\n# Printing elements of Dataframe\nprint(result)\n\
          \n"
        scriptTimeout: "360"
      postProcessing:
        updateScalarVariables:
  variables:
    v_scalar_table:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "null"
    v_grid_table:
      metadata:
        type: "GRID"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
        columns:
          table_name:
            columnType: "TEXT"
      defaultValue: []
design:
  components:
    Begin:
      position:
        x: 0
        "y": 0
      tempMetlId: 1
    Query Result To Grid:
      position:
        x: 120
        "y": -10
      tempMetlId: 2
    SQL Script:
      position:
        x: 290
        "y": -30
      tempMetlId: 3
    Grid Iterator 2:
      position:
        x: 290
        "y": -30
      tempMetlId: 5
    Python Pushdown:
      position:
        x: 170
        "y": 100
      tempMetlId: 6
